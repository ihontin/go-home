// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
	models "studentgit.kata.academy/Alkolex/go-kata/course2/3.patterns/3.patterns_strategy/task2.3.3.2/models"
)

// Exchanger is an autogenerated mock type for the Exchanger type
type Exchanger struct {
	mock.Mock
}

// GetCandlesHistory provides a mock function with given fields: pair, limit, start, end
func (_m *Exchanger) GetCandlesHistory(pair string, limit int, start time.Time, end time.Time) (models.CandlesHistory, error) {
	ret := _m.Called(pair, limit, start, end)

	var r0 models.CandlesHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) (models.CandlesHistory, error)); ok {
		return rf(pair, limit, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) models.CandlesHistory); ok {
		r0 = rf(pair, limit, start, end)
	} else {
		r0 = ret.Get(0).(models.CandlesHistory)
	}

	if rf, ok := ret.Get(1).(func(string, int, time.Time, time.Time) error); ok {
		r1 = rf(pair, limit, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClosePrice provides a mock function with given fields: pair, limit, start, end
func (_m *Exchanger) GetClosePrice(pair string, limit int, start time.Time, end time.Time) ([]float64, error) {
	ret := _m.Called(pair, limit, start, end)

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) ([]float64, error)); ok {
		return rf(pair, limit, start, end)
	}
	if rf, ok := ret.Get(0).(func(string, int, time.Time, time.Time) []float64); ok {
		r0 = rf(pair, limit, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, time.Time, time.Time) error); ok {
		r1 = rf(pair, limit, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrencies provides a mock function with given fields:
func (_m *Exchanger) GetCurrencies() (models.Currencies, error) {
	ret := _m.Called()

	var r0 models.Currencies
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.Currencies, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.Currencies); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Currencies)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderBook provides a mock function with given fields: limit, pairs
func (_m *Exchanger) GetOrderBook(limit int, pairs ...string) (models.OrderBook, error) {
	_va := make([]interface{}, len(pairs))
	for _i := range pairs {
		_va[_i] = pairs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, limit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 models.OrderBook
	var r1 error
	if rf, ok := ret.Get(0).(func(int, ...string) (models.OrderBook, error)); ok {
		return rf(limit, pairs...)
	}
	if rf, ok := ret.Get(0).(func(int, ...string) models.OrderBook); ok {
		r0 = rf(limit, pairs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.OrderBook)
		}
	}

	if rf, ok := ret.Get(1).(func(int, ...string) error); ok {
		r1 = rf(limit, pairs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTicker provides a mock function with given fields:
func (_m *Exchanger) GetTicker() (models.Ticker, error) {
	ret := _m.Called()

	var r0 models.Ticker
	var r1 error
	if rf, ok := ret.Get(0).(func() (models.Ticker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() models.Ticker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Ticker)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrades provides a mock function with given fields: pairs
func (_m *Exchanger) GetTrades(pairs ...string) (models.Trades, error) {
	_va := make([]interface{}, len(pairs))
	for _i := range pairs {
		_va[_i] = pairs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 models.Trades
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (models.Trades, error)); ok {
		return rf(pairs...)
	}
	if rf, ok := ret.Get(0).(func(...string) models.Trades); ok {
		r0 = rf(pairs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Trades)
		}
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(pairs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewExchanger interface {
	mock.TestingT
	Cleanup(func())
}

// NewExchanger creates a new instance of Exchanger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExchanger(t mockConstructorTestingTNewExchanger) *Exchanger {
	mock := &Exchanger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
