// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models(in *jlexer.Lexer, out *Whetherer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "records":
			if in.IsNull() {
				in.Skip()
				out.Records = nil
			} else {
				in.Delim('[')
				if out.Records == nil {
					if !in.IsDelim(']') {
						out.Records = make([]Record, 0, 0)
					} else {
						out.Records = []Record{}
					}
				} else {
					out.Records = (out.Records)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Record
					(v1).UnmarshalEasyJSON(in)
					out.Records = append(out.Records, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "skip":
			out.Skip = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "totalAmount":
			out.TotalAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models(out *jwriter.Writer, in Whetherer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"records\":"
		out.RawString(prefix[1:])
		if in.Records == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Records {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"skip\":"
		out.RawString(prefix)
		out.Int64(int64(in.Skip))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"totalAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Whetherer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Whetherer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Whetherer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Whetherer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models(l, v)
}
func easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models1(in *jlexer.Lexer, out *Record) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "email":
			out.Email = string(in.String())
		case "profile":
			(out.Profile).UnmarshalEasyJSON(in)
		case "password":
			out.Password = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "createdBy":
			out.CreatedBy = CreatedBy(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models1(out *jwriter.Writer, in Record) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"createdBy\":"
		out.RawString(prefix)
		out.String(string(in.CreatedBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Record) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Record) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Record) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Record) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models1(l, v)
}
func easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models2(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dob":
			out.Dob = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "firstName":
			out.FirstName = string(in.String())
		case "staticData":
			out.StaticData = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models2(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dob\":"
		out.RawString(prefix[1:])
		out.String(string(in.Dob))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"staticData\":"
		out.RawString(prefix)
		out.String(string(in.StaticData))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeStudentgitKataAcademyAlkolexGoKataCourse25Optimization2OptimizationJsoniterTask2521Models2(l, v)
}
