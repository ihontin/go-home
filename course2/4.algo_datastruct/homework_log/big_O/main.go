package main

import "fmt"

//В этом примере алгоритм выполняет постоянное количество операций, независимое от размера входных данных.

func example1(n int) {
	fmt.Println("Hello, World!")
}

//Пример 2. Временная сложность O(log n)
//В этом примере алгоритм выполняет операции, количество которых увеличивается логарифмически с размером входных данных.
//
//func example2(n int) {
//	for i := 1; i <= n; i *= 2 {
//		fmt.Println(i)
//	}
//}

//Пример 3. Временная сложность O(n)
//В этом примере алгоритм выполняет операции, количество которых линейно зависит от размера входных данных.
//
//func example3(n int) {
//	for i := 1; i <= n; i++ {
//		fmt.Println(i)
//	}
//}

//Пример 4. Временная сложность O(n^2)
//В этом примере алгоритм выполняет операции, количество которых квадратично зависит от размера входных данных.
//
//func example4(n int) {
//	for i := 1; i <= n; i++ {
//		for j := 1; j <= n; j++ {
//			fmt.Println(i, j)
//		}
//	}
//}

//Пример 5. Пространственная сложность O(1)
//В этом примере алгоритм использует постоянное количество памяти, независимое от размера входных данных.
//
//func example5(n int) {
//	var x int
//	x = n + 1
//	fmt.Println(x)
//}

//Пример 6. Пространственная сложность O(n)
//В этом примере алгоритм использует память, количество которой линейно зависит от размера входных данных.
//
//func example6(n int) {
//	var arr []int
//	for i := 1; i <= n; i++ {
//		arr = append(arr, i)
//	}
//	fmt.Println(arr)
//}

//Пример 7. Пространственная сложность O(n^2)
//В этом примере алгоритм использует память, количество которой квадратично зависит от размера входных данных.
//
//func example7(n int) {
//	var matrix [][]int
//	for i := 1; i <= n; i++ {
//		var row []int
//		for j := 1; j <= n; j++ {
//			row = append(row, i*j)
//		}
//		matrix = append(matrix, row)
//	}
//	fmt.Println(matrix)
//}

//Пример 8. Пространственная сложность O(log n)
//В этом примере алгоритм использует память,количество которой увеличивается логарифмически с размером входных данных.
//
//func example8(n int) {
//	var arr []int
//	for i := 1; i <= n; i *= 2 {
//		arr = append(arr, i)
//	}
//	fmt.Println(arr)
//}
